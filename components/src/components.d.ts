/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ApiSummary } from "./components/ehtc/api-select/api-select";
import { Battle } from "./model/ehtc/battle";
import { BattleSummary, CharacterSummary, PilotSummary } from "./model/ehtc";
import { ItemSummary } from "./components/ehtc/wrap-select/wrap-select";
import { Mission } from "./model/TIE/mission";
import { BattleText, Delt, Header, LString, LText, OpCode, Rmap, Row, TIEBattle, Voic, VoicData } from "./model/LFD";
import { Event, FileHeader, FlightGroup, GlobalGoal, GoalFG, Message, Mission as Mission1, Order, PilotFile, PostMissionQuestions, PreMissionQuestions, Tag, TIEString, Trigger, Waypt } from "./model/TIE";
import { Briefing, Event as Event1, FileHeader as FileHeader1, FlightGroup as FlightGroup1, GlobalGoal as GlobalGoal1, GoalFG as GoalFG1, GoalGlobal, Message as Message1, Mission as Mission2, MissionBOP, MissionData, Order as Order1, PilotFile as PilotFile1, Role, Tag as Tag1, Team, TeamStats, Trigger as Trigger1, Waypt as Waypt1, XvTString } from "./model/XvT";
import { Briefing as Briefing1, BriefingHeader, Coordinate, FileHeader as FileHeader2, FlightGroup as FlightGroup2, Icon, Mission as Mission3, MissionHeader, ObjectGroup, Page, PilotFile as PilotFile2, String, Tag as Tag2, ViewportSetting } from "./model/XW";
import { Briefing as Briefing2, Event as Event2, FileHeader as FileHeader3, FlightGroup as FlightGroup3, GlobalCargo, GlobalGoal as GlobalGoal2, GoalFG as GoalFG2, GoalGlobal as GoalGlobal1, LengthString, Message as Message2, Mission as Mission4, MissionData as MissionData1, Order as Order2, PilotFile as PilotFile3, Skip, Tag as Tag3, Team as Team1, Trigger as Trigger2, Waypt as Waypt2, XWAString } from "./model/XWA";
export { ApiSummary } from "./components/ehtc/api-select/api-select";
export { Battle } from "./model/ehtc/battle";
export { BattleSummary, CharacterSummary, PilotSummary } from "./model/ehtc";
export { ItemSummary } from "./components/ehtc/wrap-select/wrap-select";
export { Mission } from "./model/TIE/mission";
export { BattleText, Delt, Header, LString, LText, OpCode, Rmap, Row, TIEBattle, Voic, VoicData } from "./model/LFD";
export { Event, FileHeader, FlightGroup, GlobalGoal, GoalFG, Message, Mission as Mission1, Order, PilotFile, PostMissionQuestions, PreMissionQuestions, Tag, TIEString, Trigger, Waypt } from "./model/TIE";
export { Briefing, Event as Event1, FileHeader as FileHeader1, FlightGroup as FlightGroup1, GlobalGoal as GlobalGoal1, GoalFG as GoalFG1, GoalGlobal, Message as Message1, Mission as Mission2, MissionBOP, MissionData, Order as Order1, PilotFile as PilotFile1, Role, Tag as Tag1, Team, TeamStats, Trigger as Trigger1, Waypt as Waypt1, XvTString } from "./model/XvT";
export { Briefing as Briefing1, BriefingHeader, Coordinate, FileHeader as FileHeader2, FlightGroup as FlightGroup2, Icon, Mission as Mission3, MissionHeader, ObjectGroup, Page, PilotFile as PilotFile2, String, Tag as Tag2, ViewportSetting } from "./model/XW";
export { Briefing as Briefing2, Event as Event2, FileHeader as FileHeader3, FlightGroup as FlightGroup3, GlobalCargo, GlobalGoal as GlobalGoal2, GoalFG as GoalFG2, GoalGlobal as GoalGlobal1, LengthString, Message as Message2, Mission as Mission4, MissionData as MissionData1, Order as Order2, PilotFile as PilotFile3, Skip, Tag as Tag3, Team as Team1, Trigger as Trigger2, Waypt as Waypt2, XWAString } from "./model/XWA";
export namespace Components {
    interface EhtcApiSelect {
        "domain": string;
        "item": ApiSummary;
        "name": string;
        "search": (query: string) => Promise<void>;
        "setValue": (val: string | number) => Promise<void>;
        "url": string;
        "value": string;
    }
    interface EhtcApiStore {
        "apiFetch": (url: string) => Promise<any>;
        "cachePrefix": string;
        "domain": string;
    }
    interface EhtcBattle {
        "battle": Battle;
        "code": string;
    }
    interface EhtcBattleCenter {
    }
    interface EhtcBattleSelect {
        "battle": BattleSummary;
        "category": string;
        "disabled": boolean;
        "domain": string;
        "name": string;
        "readonly": boolean;
        "search": (query: string) => Promise<void>;
        "setValue": (val: string | number) => Promise<void>;
        "value": string;
    }
    interface EhtcMemberSelect {
        "disabled": boolean;
        "domain": string;
        "filter": string;
        "mode": "character" | "pilot" | "group-characters";
        "name": string;
        "readonly": boolean;
        "search": (query: string) => Promise<void>;
        "setValue": (val: string | number) => Promise<void>;
        "status": "active" | "all";
        "value": string;
    }
    interface EhtcPilot {
        "pin": number;
        "secondary": boolean;
    }
    interface EhtcWrapSelect {
        "disabled": boolean;
        "item": ItemSummary;
        "name": string;
        "readonly": boolean;
        "search": (query: string) => Promise<void>;
        "value": string;
    }
    interface PyriteFrown {
        "mission": Mission;
        "modeSelect": (mode: "Officer" | "Secret" | "Table") => Promise<void>;
        "showButtons": boolean;
    }
    interface PyriteLfd {
        "file": string;
        "loadArrayBuffer": (value: ArrayBuffer) => Promise<void>;
    }
    interface PyriteLfdBattleText {
        "battletext": BattleText;
    }
    interface PyriteLfdDelt {
        "delt": Delt;
    }
    interface PyriteLfdHeader {
        "header": Header;
    }
    interface PyriteLfdLString {
        "lstring": LString;
    }
    interface PyriteLfdLText {
        "ltext": LText;
    }
    interface PyriteLfdOpCode {
        "opcode": OpCode;
    }
    interface PyriteLfdRmap {
        "rmap": Rmap;
    }
    interface PyriteLfdRow {
        "row": Row;
    }
    interface PyriteLfdTieBattle {
        "tiebattle": TIEBattle;
    }
    interface PyriteLfdVoic {
        "voic": Voic;
    }
    interface PyriteLfdVoicData {
        "voicdata": VoicData;
    }
    interface PyriteMission {
        "file": string;
        "name": string;
        "nr": string;
        "plt": string;
        "sub": string;
    }
    interface PyriteMissionTabs {
    }
    interface PyriteMissionWrapper {
        "file": string;
    }
    interface PyritePilotFile {
        "allowUpload": boolean;
        "bsf": string;
        "file": string;
        "useFileInput": (file: File) => Promise<void>;
    }
    interface PyriteResource {
        "name": string;
    }
    interface PyriteResources {
    }
    interface PyriteTieBriefing {
        "mission"?: Mission1;
    }
    interface PyriteTieChecklist {
        "lfdUrl": string;
        "missionUrl": string;
    }
    interface PyriteTieEvent {
        "event": Event;
    }
    interface PyriteTieFileHeader {
        "fileheader": FileHeader;
    }
    interface PyriteTieFlightGroup {
        "flightgroup": FlightGroup;
    }
    interface PyriteTieFlightgroup {
        "flightGroup": FlightGroup;
    }
    interface PyriteTieFlightgroups {
        "mission": Mission;
    }
    interface PyriteTieGlobalGoal {
        "globalgoal": GlobalGoal;
    }
    interface PyriteTieGoalFg {
        "goalfg": GoalFG;
    }
    interface PyriteTieMessage {
        "message": Message;
    }
    interface PyriteTieMessages {
        "mission": Mission;
    }
    interface PyriteTieMission {
        "file": string;
    }
    interface PyriteTieOrder {
        "order": Order;
    }
    interface PyriteTiePilotFile {
        "pilotfile": PilotFile;
    }
    interface PyriteTiePostMissionQuestions {
        "postmissionquestions": PostMissionQuestions;
    }
    interface PyriteTiePreMissionQuestions {
        "premissionquestions": PreMissionQuestions;
    }
    interface PyriteTieScore {
        "mission": Mission;
    }
    interface PyriteTieTag {
        "tag": Tag;
    }
    interface PyriteTieTieString {
        "tiestring": TIEString;
    }
    interface PyriteTieTrigger {
        "trigger": Trigger;
    }
    interface PyriteTieWaypt {
        "waypt": Waypt;
    }
    interface PyriteXvtBriefing {
        "briefing": Briefing;
    }
    interface PyriteXvtEvent {
        "event": Event1;
    }
    interface PyriteXvtFileHeader {
        "fileheader": FileHeader1;
    }
    interface PyriteXvtFlightGroup {
        "flightgroup": FlightGroup1;
    }
    interface PyriteXvtGlobalGoal {
        "globalgoal": GlobalGoal1;
    }
    interface PyriteXvtGoalFg {
        "goalfg": GoalFG1;
    }
    interface PyriteXvtGoalGlobal {
        "goalglobal": GoalGlobal;
    }
    interface PyriteXvtMessage {
        "message": Message1;
    }
    interface PyriteXvtMission {
        "mission": Mission2;
    }
    interface PyriteXvtMissionBop {
        "missionbop": MissionBOP;
    }
    interface PyriteXvtMissionData {
        "missiondata": MissionData;
    }
    interface PyriteXvtOrder {
        "order": Order1;
    }
    interface PyriteXvtPilotFile {
        "pilotfile": PilotFile1;
    }
    interface PyriteXvtRole {
        "xvtrole": Role;
    }
    interface PyriteXvtTag {
        "tag": Tag1;
    }
    interface PyriteXvtTeam {
        "team": Team;
    }
    interface PyriteXvtTeamStats {
        "teamstats": TeamStats;
    }
    interface PyriteXvtTrigger {
        "trigger": Trigger1;
    }
    interface PyriteXvtWaypt {
        "waypt": Waypt1;
    }
    interface PyriteXvtXvTString {
        "xvtstring": XvTString;
    }
    interface PyriteXwBriefing {
        "briefing": Briefing1;
    }
    interface PyriteXwBriefingHeader {
        "briefingheader": BriefingHeader;
    }
    interface PyriteXwCoordinate {
        "coordinate": Coordinate;
    }
    interface PyriteXwFileHeader {
        "fileheader": FileHeader2;
    }
    interface PyriteXwFlightGroup {
        "flightgroup": FlightGroup2;
    }
    interface PyriteXwIcon {
        "icon": Icon;
    }
    interface PyriteXwMission {
        "mission": Mission3;
    }
    interface PyriteXwMissionHeader {
        "missionheader": MissionHeader;
    }
    interface PyriteXwObjectGroup {
        "objectgroup": ObjectGroup;
    }
    interface PyriteXwPage {
        "page": Page;
    }
    interface PyriteXwPilotFile {
        "pilotfile": PilotFile2;
    }
    interface PyriteXwString {
        "string": String;
    }
    interface PyriteXwTag {
        "tag": Tag2;
    }
    interface PyriteXwViewportSetting {
        "viewportsetting": ViewportSetting;
    }
    interface PyriteXwaBriefing {
        "briefing": Briefing2;
    }
    interface PyriteXwaEvent {
        "event": Event2;
    }
    interface PyriteXwaFileHeader {
        "fileheader": FileHeader3;
    }
    interface PyriteXwaFlightGroup {
        "flightgroup": FlightGroup3;
    }
    interface PyriteXwaGlobalCargo {
        "globalcargo": GlobalCargo;
    }
    interface PyriteXwaGlobalGoal {
        "globalgoal": GlobalGoal2;
    }
    interface PyriteXwaGoalFg {
        "goalfg": GoalFG2;
    }
    interface PyriteXwaGoalGlobal {
        "goalglobal": GoalGlobal1;
    }
    interface PyriteXwaLengthString {
        "lengthstring": LengthString;
    }
    interface PyriteXwaMessage {
        "message": Message2;
    }
    interface PyriteXwaMission {
        "mission": Mission4;
    }
    interface PyriteXwaMissionData {
        "missiondata": MissionData1;
    }
    interface PyriteXwaOrder {
        "order": Order2;
    }
    interface PyriteXwaPilotFile {
        "pilotfile": PilotFile3;
    }
    interface PyriteXwaSkip {
        "skip": Skip;
    }
    interface PyriteXwaTag {
        "tag": Tag3;
    }
    interface PyriteXwaTeam {
        "team": Team1;
    }
    interface PyriteXwaTrigger {
        "trigger": Trigger2;
    }
    interface PyriteXwaWaypt {
        "waypt": Waypt2;
    }
    interface PyriteXwaXwaString {
        "xwastring": XWAString;
    }
}
export interface EhtcApiSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEhtcApiSelectElement;
}
export interface EhtcBattleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEhtcBattleElement;
}
export interface EhtcBattleSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEhtcBattleSelectElement;
}
export interface EhtcMemberSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEhtcMemberSelectElement;
}
export interface EhtcWrapSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEhtcWrapSelectElement;
}
declare global {
    interface HTMLEhtcApiSelectElementEventMap {
        "apiSelect": ApiSummary;
    }
    interface HTMLEhtcApiSelectElement extends Components.EhtcApiSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEhtcApiSelectElementEventMap>(type: K, listener: (this: HTMLEhtcApiSelectElement, ev: EhtcApiSelectCustomEvent<HTMLEhtcApiSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEhtcApiSelectElementEventMap>(type: K, listener: (this: HTMLEhtcApiSelectElement, ev: EhtcApiSelectCustomEvent<HTMLEhtcApiSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEhtcApiSelectElement: {
        prototype: HTMLEhtcApiSelectElement;
        new (): HTMLEhtcApiSelectElement;
    };
    interface HTMLEhtcApiStoreElement extends Components.EhtcApiStore, HTMLStencilElement {
    }
    var HTMLEhtcApiStoreElement: {
        prototype: HTMLEhtcApiStoreElement;
        new (): HTMLEhtcApiStoreElement;
    };
    interface HTMLEhtcBattleElementEventMap {
        "downloadBattle": Battle;
    }
    interface HTMLEhtcBattleElement extends Components.EhtcBattle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEhtcBattleElementEventMap>(type: K, listener: (this: HTMLEhtcBattleElement, ev: EhtcBattleCustomEvent<HTMLEhtcBattleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEhtcBattleElementEventMap>(type: K, listener: (this: HTMLEhtcBattleElement, ev: EhtcBattleCustomEvent<HTMLEhtcBattleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEhtcBattleElement: {
        prototype: HTMLEhtcBattleElement;
        new (): HTMLEhtcBattleElement;
    };
    interface HTMLEhtcBattleCenterElement extends Components.EhtcBattleCenter, HTMLStencilElement {
    }
    var HTMLEhtcBattleCenterElement: {
        prototype: HTMLEhtcBattleCenterElement;
        new (): HTMLEhtcBattleCenterElement;
    };
    interface HTMLEhtcBattleSelectElementEventMap {
        "battleSelect": BattleSummary;
    }
    interface HTMLEhtcBattleSelectElement extends Components.EhtcBattleSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEhtcBattleSelectElementEventMap>(type: K, listener: (this: HTMLEhtcBattleSelectElement, ev: EhtcBattleSelectCustomEvent<HTMLEhtcBattleSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEhtcBattleSelectElementEventMap>(type: K, listener: (this: HTMLEhtcBattleSelectElement, ev: EhtcBattleSelectCustomEvent<HTMLEhtcBattleSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEhtcBattleSelectElement: {
        prototype: HTMLEhtcBattleSelectElement;
        new (): HTMLEhtcBattleSelectElement;
    };
    interface HTMLEhtcMemberSelectElementEventMap {
        "memberSelect": PilotSummary | CharacterSummary;
    }
    interface HTMLEhtcMemberSelectElement extends Components.EhtcMemberSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEhtcMemberSelectElementEventMap>(type: K, listener: (this: HTMLEhtcMemberSelectElement, ev: EhtcMemberSelectCustomEvent<HTMLEhtcMemberSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEhtcMemberSelectElementEventMap>(type: K, listener: (this: HTMLEhtcMemberSelectElement, ev: EhtcMemberSelectCustomEvent<HTMLEhtcMemberSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEhtcMemberSelectElement: {
        prototype: HTMLEhtcMemberSelectElement;
        new (): HTMLEhtcMemberSelectElement;
    };
    interface HTMLEhtcPilotElement extends Components.EhtcPilot, HTMLStencilElement {
    }
    var HTMLEhtcPilotElement: {
        prototype: HTMLEhtcPilotElement;
        new (): HTMLEhtcPilotElement;
    };
    interface HTMLEhtcWrapSelectElementEventMap {
        "itemSelect": ItemSummary;
    }
    interface HTMLEhtcWrapSelectElement extends Components.EhtcWrapSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEhtcWrapSelectElementEventMap>(type: K, listener: (this: HTMLEhtcWrapSelectElement, ev: EhtcWrapSelectCustomEvent<HTMLEhtcWrapSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEhtcWrapSelectElementEventMap>(type: K, listener: (this: HTMLEhtcWrapSelectElement, ev: EhtcWrapSelectCustomEvent<HTMLEhtcWrapSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEhtcWrapSelectElement: {
        prototype: HTMLEhtcWrapSelectElement;
        new (): HTMLEhtcWrapSelectElement;
    };
    interface HTMLPyriteFrownElement extends Components.PyriteFrown, HTMLStencilElement {
    }
    var HTMLPyriteFrownElement: {
        prototype: HTMLPyriteFrownElement;
        new (): HTMLPyriteFrownElement;
    };
    interface HTMLPyriteLfdElement extends Components.PyriteLfd, HTMLStencilElement {
    }
    var HTMLPyriteLfdElement: {
        prototype: HTMLPyriteLfdElement;
        new (): HTMLPyriteLfdElement;
    };
    interface HTMLPyriteLfdBattleTextElement extends Components.PyriteLfdBattleText, HTMLStencilElement {
    }
    var HTMLPyriteLfdBattleTextElement: {
        prototype: HTMLPyriteLfdBattleTextElement;
        new (): HTMLPyriteLfdBattleTextElement;
    };
    interface HTMLPyriteLfdDeltElement extends Components.PyriteLfdDelt, HTMLStencilElement {
    }
    var HTMLPyriteLfdDeltElement: {
        prototype: HTMLPyriteLfdDeltElement;
        new (): HTMLPyriteLfdDeltElement;
    };
    interface HTMLPyriteLfdHeaderElement extends Components.PyriteLfdHeader, HTMLStencilElement {
    }
    var HTMLPyriteLfdHeaderElement: {
        prototype: HTMLPyriteLfdHeaderElement;
        new (): HTMLPyriteLfdHeaderElement;
    };
    interface HTMLPyriteLfdLStringElement extends Components.PyriteLfdLString, HTMLStencilElement {
    }
    var HTMLPyriteLfdLStringElement: {
        prototype: HTMLPyriteLfdLStringElement;
        new (): HTMLPyriteLfdLStringElement;
    };
    interface HTMLPyriteLfdLTextElement extends Components.PyriteLfdLText, HTMLStencilElement {
    }
    var HTMLPyriteLfdLTextElement: {
        prototype: HTMLPyriteLfdLTextElement;
        new (): HTMLPyriteLfdLTextElement;
    };
    interface HTMLPyriteLfdOpCodeElement extends Components.PyriteLfdOpCode, HTMLStencilElement {
    }
    var HTMLPyriteLfdOpCodeElement: {
        prototype: HTMLPyriteLfdOpCodeElement;
        new (): HTMLPyriteLfdOpCodeElement;
    };
    interface HTMLPyriteLfdRmapElement extends Components.PyriteLfdRmap, HTMLStencilElement {
    }
    var HTMLPyriteLfdRmapElement: {
        prototype: HTMLPyriteLfdRmapElement;
        new (): HTMLPyriteLfdRmapElement;
    };
    interface HTMLPyriteLfdRowElement extends Components.PyriteLfdRow, HTMLStencilElement {
    }
    var HTMLPyriteLfdRowElement: {
        prototype: HTMLPyriteLfdRowElement;
        new (): HTMLPyriteLfdRowElement;
    };
    interface HTMLPyriteLfdTieBattleElement extends Components.PyriteLfdTieBattle, HTMLStencilElement {
    }
    var HTMLPyriteLfdTieBattleElement: {
        prototype: HTMLPyriteLfdTieBattleElement;
        new (): HTMLPyriteLfdTieBattleElement;
    };
    interface HTMLPyriteLfdVoicElement extends Components.PyriteLfdVoic, HTMLStencilElement {
    }
    var HTMLPyriteLfdVoicElement: {
        prototype: HTMLPyriteLfdVoicElement;
        new (): HTMLPyriteLfdVoicElement;
    };
    interface HTMLPyriteLfdVoicDataElement extends Components.PyriteLfdVoicData, HTMLStencilElement {
    }
    var HTMLPyriteLfdVoicDataElement: {
        prototype: HTMLPyriteLfdVoicDataElement;
        new (): HTMLPyriteLfdVoicDataElement;
    };
    interface HTMLPyriteMissionElement extends Components.PyriteMission, HTMLStencilElement {
    }
    var HTMLPyriteMissionElement: {
        prototype: HTMLPyriteMissionElement;
        new (): HTMLPyriteMissionElement;
    };
    interface HTMLPyriteMissionTabsElement extends Components.PyriteMissionTabs, HTMLStencilElement {
    }
    var HTMLPyriteMissionTabsElement: {
        prototype: HTMLPyriteMissionTabsElement;
        new (): HTMLPyriteMissionTabsElement;
    };
    interface HTMLPyriteMissionWrapperElement extends Components.PyriteMissionWrapper, HTMLStencilElement {
    }
    var HTMLPyriteMissionWrapperElement: {
        prototype: HTMLPyriteMissionWrapperElement;
        new (): HTMLPyriteMissionWrapperElement;
    };
    interface HTMLPyritePilotFileElement extends Components.PyritePilotFile, HTMLStencilElement {
    }
    var HTMLPyritePilotFileElement: {
        prototype: HTMLPyritePilotFileElement;
        new (): HTMLPyritePilotFileElement;
    };
    interface HTMLPyriteResourceElement extends Components.PyriteResource, HTMLStencilElement {
    }
    var HTMLPyriteResourceElement: {
        prototype: HTMLPyriteResourceElement;
        new (): HTMLPyriteResourceElement;
    };
    interface HTMLPyriteResourcesElement extends Components.PyriteResources, HTMLStencilElement {
    }
    var HTMLPyriteResourcesElement: {
        prototype: HTMLPyriteResourcesElement;
        new (): HTMLPyriteResourcesElement;
    };
    interface HTMLPyriteTieBriefingElement extends Components.PyriteTieBriefing, HTMLStencilElement {
    }
    var HTMLPyriteTieBriefingElement: {
        prototype: HTMLPyriteTieBriefingElement;
        new (): HTMLPyriteTieBriefingElement;
    };
    interface HTMLPyriteTieChecklistElement extends Components.PyriteTieChecklist, HTMLStencilElement {
    }
    var HTMLPyriteTieChecklistElement: {
        prototype: HTMLPyriteTieChecklistElement;
        new (): HTMLPyriteTieChecklistElement;
    };
    interface HTMLPyriteTieEventElement extends Components.PyriteTieEvent, HTMLStencilElement {
    }
    var HTMLPyriteTieEventElement: {
        prototype: HTMLPyriteTieEventElement;
        new (): HTMLPyriteTieEventElement;
    };
    interface HTMLPyriteTieFileHeaderElement extends Components.PyriteTieFileHeader, HTMLStencilElement {
    }
    var HTMLPyriteTieFileHeaderElement: {
        prototype: HTMLPyriteTieFileHeaderElement;
        new (): HTMLPyriteTieFileHeaderElement;
    };
    interface HTMLPyriteTieFlightGroupElement extends Components.PyriteTieFlightGroup, HTMLStencilElement {
    }
    var HTMLPyriteTieFlightGroupElement: {
        prototype: HTMLPyriteTieFlightGroupElement;
        new (): HTMLPyriteTieFlightGroupElement;
    };
    interface HTMLPyriteTieFlightgroupElement extends Components.PyriteTieFlightgroup, HTMLStencilElement {
    }
    var HTMLPyriteTieFlightgroupElement: {
        prototype: HTMLPyriteTieFlightgroupElement;
        new (): HTMLPyriteTieFlightgroupElement;
    };
    interface HTMLPyriteTieFlightgroupsElement extends Components.PyriteTieFlightgroups, HTMLStencilElement {
    }
    var HTMLPyriteTieFlightgroupsElement: {
        prototype: HTMLPyriteTieFlightgroupsElement;
        new (): HTMLPyriteTieFlightgroupsElement;
    };
    interface HTMLPyriteTieGlobalGoalElement extends Components.PyriteTieGlobalGoal, HTMLStencilElement {
    }
    var HTMLPyriteTieGlobalGoalElement: {
        prototype: HTMLPyriteTieGlobalGoalElement;
        new (): HTMLPyriteTieGlobalGoalElement;
    };
    interface HTMLPyriteTieGoalFgElement extends Components.PyriteTieGoalFg, HTMLStencilElement {
    }
    var HTMLPyriteTieGoalFgElement: {
        prototype: HTMLPyriteTieGoalFgElement;
        new (): HTMLPyriteTieGoalFgElement;
    };
    interface HTMLPyriteTieMessageElement extends Components.PyriteTieMessage, HTMLStencilElement {
    }
    var HTMLPyriteTieMessageElement: {
        prototype: HTMLPyriteTieMessageElement;
        new (): HTMLPyriteTieMessageElement;
    };
    interface HTMLPyriteTieMessagesElement extends Components.PyriteTieMessages, HTMLStencilElement {
    }
    var HTMLPyriteTieMessagesElement: {
        prototype: HTMLPyriteTieMessagesElement;
        new (): HTMLPyriteTieMessagesElement;
    };
    interface HTMLPyriteTieMissionElement extends Components.PyriteTieMission, HTMLStencilElement {
    }
    var HTMLPyriteTieMissionElement: {
        prototype: HTMLPyriteTieMissionElement;
        new (): HTMLPyriteTieMissionElement;
    };
    interface HTMLPyriteTieOrderElement extends Components.PyriteTieOrder, HTMLStencilElement {
    }
    var HTMLPyriteTieOrderElement: {
        prototype: HTMLPyriteTieOrderElement;
        new (): HTMLPyriteTieOrderElement;
    };
    interface HTMLPyriteTiePilotFileElement extends Components.PyriteTiePilotFile, HTMLStencilElement {
    }
    var HTMLPyriteTiePilotFileElement: {
        prototype: HTMLPyriteTiePilotFileElement;
        new (): HTMLPyriteTiePilotFileElement;
    };
    interface HTMLPyriteTiePostMissionQuestionsElement extends Components.PyriteTiePostMissionQuestions, HTMLStencilElement {
    }
    var HTMLPyriteTiePostMissionQuestionsElement: {
        prototype: HTMLPyriteTiePostMissionQuestionsElement;
        new (): HTMLPyriteTiePostMissionQuestionsElement;
    };
    interface HTMLPyriteTiePreMissionQuestionsElement extends Components.PyriteTiePreMissionQuestions, HTMLStencilElement {
    }
    var HTMLPyriteTiePreMissionQuestionsElement: {
        prototype: HTMLPyriteTiePreMissionQuestionsElement;
        new (): HTMLPyriteTiePreMissionQuestionsElement;
    };
    interface HTMLPyriteTieScoreElement extends Components.PyriteTieScore, HTMLStencilElement {
    }
    var HTMLPyriteTieScoreElement: {
        prototype: HTMLPyriteTieScoreElement;
        new (): HTMLPyriteTieScoreElement;
    };
    interface HTMLPyriteTieTagElement extends Components.PyriteTieTag, HTMLStencilElement {
    }
    var HTMLPyriteTieTagElement: {
        prototype: HTMLPyriteTieTagElement;
        new (): HTMLPyriteTieTagElement;
    };
    interface HTMLPyriteTieTieStringElement extends Components.PyriteTieTieString, HTMLStencilElement {
    }
    var HTMLPyriteTieTieStringElement: {
        prototype: HTMLPyriteTieTieStringElement;
        new (): HTMLPyriteTieTieStringElement;
    };
    interface HTMLPyriteTieTriggerElement extends Components.PyriteTieTrigger, HTMLStencilElement {
    }
    var HTMLPyriteTieTriggerElement: {
        prototype: HTMLPyriteTieTriggerElement;
        new (): HTMLPyriteTieTriggerElement;
    };
    interface HTMLPyriteTieWayptElement extends Components.PyriteTieWaypt, HTMLStencilElement {
    }
    var HTMLPyriteTieWayptElement: {
        prototype: HTMLPyriteTieWayptElement;
        new (): HTMLPyriteTieWayptElement;
    };
    interface HTMLPyriteXvtBriefingElement extends Components.PyriteXvtBriefing, HTMLStencilElement {
    }
    var HTMLPyriteXvtBriefingElement: {
        prototype: HTMLPyriteXvtBriefingElement;
        new (): HTMLPyriteXvtBriefingElement;
    };
    interface HTMLPyriteXvtEventElement extends Components.PyriteXvtEvent, HTMLStencilElement {
    }
    var HTMLPyriteXvtEventElement: {
        prototype: HTMLPyriteXvtEventElement;
        new (): HTMLPyriteXvtEventElement;
    };
    interface HTMLPyriteXvtFileHeaderElement extends Components.PyriteXvtFileHeader, HTMLStencilElement {
    }
    var HTMLPyriteXvtFileHeaderElement: {
        prototype: HTMLPyriteXvtFileHeaderElement;
        new (): HTMLPyriteXvtFileHeaderElement;
    };
    interface HTMLPyriteXvtFlightGroupElement extends Components.PyriteXvtFlightGroup, HTMLStencilElement {
    }
    var HTMLPyriteXvtFlightGroupElement: {
        prototype: HTMLPyriteXvtFlightGroupElement;
        new (): HTMLPyriteXvtFlightGroupElement;
    };
    interface HTMLPyriteXvtGlobalGoalElement extends Components.PyriteXvtGlobalGoal, HTMLStencilElement {
    }
    var HTMLPyriteXvtGlobalGoalElement: {
        prototype: HTMLPyriteXvtGlobalGoalElement;
        new (): HTMLPyriteXvtGlobalGoalElement;
    };
    interface HTMLPyriteXvtGoalFgElement extends Components.PyriteXvtGoalFg, HTMLStencilElement {
    }
    var HTMLPyriteXvtGoalFgElement: {
        prototype: HTMLPyriteXvtGoalFgElement;
        new (): HTMLPyriteXvtGoalFgElement;
    };
    interface HTMLPyriteXvtGoalGlobalElement extends Components.PyriteXvtGoalGlobal, HTMLStencilElement {
    }
    var HTMLPyriteXvtGoalGlobalElement: {
        prototype: HTMLPyriteXvtGoalGlobalElement;
        new (): HTMLPyriteXvtGoalGlobalElement;
    };
    interface HTMLPyriteXvtMessageElement extends Components.PyriteXvtMessage, HTMLStencilElement {
    }
    var HTMLPyriteXvtMessageElement: {
        prototype: HTMLPyriteXvtMessageElement;
        new (): HTMLPyriteXvtMessageElement;
    };
    interface HTMLPyriteXvtMissionElement extends Components.PyriteXvtMission, HTMLStencilElement {
    }
    var HTMLPyriteXvtMissionElement: {
        prototype: HTMLPyriteXvtMissionElement;
        new (): HTMLPyriteXvtMissionElement;
    };
    interface HTMLPyriteXvtMissionBopElement extends Components.PyriteXvtMissionBop, HTMLStencilElement {
    }
    var HTMLPyriteXvtMissionBopElement: {
        prototype: HTMLPyriteXvtMissionBopElement;
        new (): HTMLPyriteXvtMissionBopElement;
    };
    interface HTMLPyriteXvtMissionDataElement extends Components.PyriteXvtMissionData, HTMLStencilElement {
    }
    var HTMLPyriteXvtMissionDataElement: {
        prototype: HTMLPyriteXvtMissionDataElement;
        new (): HTMLPyriteXvtMissionDataElement;
    };
    interface HTMLPyriteXvtOrderElement extends Components.PyriteXvtOrder, HTMLStencilElement {
    }
    var HTMLPyriteXvtOrderElement: {
        prototype: HTMLPyriteXvtOrderElement;
        new (): HTMLPyriteXvtOrderElement;
    };
    interface HTMLPyriteXvtPilotFileElement extends Components.PyriteXvtPilotFile, HTMLStencilElement {
    }
    var HTMLPyriteXvtPilotFileElement: {
        prototype: HTMLPyriteXvtPilotFileElement;
        new (): HTMLPyriteXvtPilotFileElement;
    };
    interface HTMLPyriteXvtRoleElement extends Components.PyriteXvtRole, HTMLStencilElement {
    }
    var HTMLPyriteXvtRoleElement: {
        prototype: HTMLPyriteXvtRoleElement;
        new (): HTMLPyriteXvtRoleElement;
    };
    interface HTMLPyriteXvtTagElement extends Components.PyriteXvtTag, HTMLStencilElement {
    }
    var HTMLPyriteXvtTagElement: {
        prototype: HTMLPyriteXvtTagElement;
        new (): HTMLPyriteXvtTagElement;
    };
    interface HTMLPyriteXvtTeamElement extends Components.PyriteXvtTeam, HTMLStencilElement {
    }
    var HTMLPyriteXvtTeamElement: {
        prototype: HTMLPyriteXvtTeamElement;
        new (): HTMLPyriteXvtTeamElement;
    };
    interface HTMLPyriteXvtTeamStatsElement extends Components.PyriteXvtTeamStats, HTMLStencilElement {
    }
    var HTMLPyriteXvtTeamStatsElement: {
        prototype: HTMLPyriteXvtTeamStatsElement;
        new (): HTMLPyriteXvtTeamStatsElement;
    };
    interface HTMLPyriteXvtTriggerElement extends Components.PyriteXvtTrigger, HTMLStencilElement {
    }
    var HTMLPyriteXvtTriggerElement: {
        prototype: HTMLPyriteXvtTriggerElement;
        new (): HTMLPyriteXvtTriggerElement;
    };
    interface HTMLPyriteXvtWayptElement extends Components.PyriteXvtWaypt, HTMLStencilElement {
    }
    var HTMLPyriteXvtWayptElement: {
        prototype: HTMLPyriteXvtWayptElement;
        new (): HTMLPyriteXvtWayptElement;
    };
    interface HTMLPyriteXvtXvTStringElement extends Components.PyriteXvtXvTString, HTMLStencilElement {
    }
    var HTMLPyriteXvtXvTStringElement: {
        prototype: HTMLPyriteXvtXvTStringElement;
        new (): HTMLPyriteXvtXvTStringElement;
    };
    interface HTMLPyriteXwBriefingElement extends Components.PyriteXwBriefing, HTMLStencilElement {
    }
    var HTMLPyriteXwBriefingElement: {
        prototype: HTMLPyriteXwBriefingElement;
        new (): HTMLPyriteXwBriefingElement;
    };
    interface HTMLPyriteXwBriefingHeaderElement extends Components.PyriteXwBriefingHeader, HTMLStencilElement {
    }
    var HTMLPyriteXwBriefingHeaderElement: {
        prototype: HTMLPyriteXwBriefingHeaderElement;
        new (): HTMLPyriteXwBriefingHeaderElement;
    };
    interface HTMLPyriteXwCoordinateElement extends Components.PyriteXwCoordinate, HTMLStencilElement {
    }
    var HTMLPyriteXwCoordinateElement: {
        prototype: HTMLPyriteXwCoordinateElement;
        new (): HTMLPyriteXwCoordinateElement;
    };
    interface HTMLPyriteXwFileHeaderElement extends Components.PyriteXwFileHeader, HTMLStencilElement {
    }
    var HTMLPyriteXwFileHeaderElement: {
        prototype: HTMLPyriteXwFileHeaderElement;
        new (): HTMLPyriteXwFileHeaderElement;
    };
    interface HTMLPyriteXwFlightGroupElement extends Components.PyriteXwFlightGroup, HTMLStencilElement {
    }
    var HTMLPyriteXwFlightGroupElement: {
        prototype: HTMLPyriteXwFlightGroupElement;
        new (): HTMLPyriteXwFlightGroupElement;
    };
    interface HTMLPyriteXwIconElement extends Components.PyriteXwIcon, HTMLStencilElement {
    }
    var HTMLPyriteXwIconElement: {
        prototype: HTMLPyriteXwIconElement;
        new (): HTMLPyriteXwIconElement;
    };
    interface HTMLPyriteXwMissionElement extends Components.PyriteXwMission, HTMLStencilElement {
    }
    var HTMLPyriteXwMissionElement: {
        prototype: HTMLPyriteXwMissionElement;
        new (): HTMLPyriteXwMissionElement;
    };
    interface HTMLPyriteXwMissionHeaderElement extends Components.PyriteXwMissionHeader, HTMLStencilElement {
    }
    var HTMLPyriteXwMissionHeaderElement: {
        prototype: HTMLPyriteXwMissionHeaderElement;
        new (): HTMLPyriteXwMissionHeaderElement;
    };
    interface HTMLPyriteXwObjectGroupElement extends Components.PyriteXwObjectGroup, HTMLStencilElement {
    }
    var HTMLPyriteXwObjectGroupElement: {
        prototype: HTMLPyriteXwObjectGroupElement;
        new (): HTMLPyriteXwObjectGroupElement;
    };
    interface HTMLPyriteXwPageElement extends Components.PyriteXwPage, HTMLStencilElement {
    }
    var HTMLPyriteXwPageElement: {
        prototype: HTMLPyriteXwPageElement;
        new (): HTMLPyriteXwPageElement;
    };
    interface HTMLPyriteXwPilotFileElement extends Components.PyriteXwPilotFile, HTMLStencilElement {
    }
    var HTMLPyriteXwPilotFileElement: {
        prototype: HTMLPyriteXwPilotFileElement;
        new (): HTMLPyriteXwPilotFileElement;
    };
    interface HTMLPyriteXwStringElement extends Components.PyriteXwString, HTMLStencilElement {
    }
    var HTMLPyriteXwStringElement: {
        prototype: HTMLPyriteXwStringElement;
        new (): HTMLPyriteXwStringElement;
    };
    interface HTMLPyriteXwTagElement extends Components.PyriteXwTag, HTMLStencilElement {
    }
    var HTMLPyriteXwTagElement: {
        prototype: HTMLPyriteXwTagElement;
        new (): HTMLPyriteXwTagElement;
    };
    interface HTMLPyriteXwViewportSettingElement extends Components.PyriteXwViewportSetting, HTMLStencilElement {
    }
    var HTMLPyriteXwViewportSettingElement: {
        prototype: HTMLPyriteXwViewportSettingElement;
        new (): HTMLPyriteXwViewportSettingElement;
    };
    interface HTMLPyriteXwaBriefingElement extends Components.PyriteXwaBriefing, HTMLStencilElement {
    }
    var HTMLPyriteXwaBriefingElement: {
        prototype: HTMLPyriteXwaBriefingElement;
        new (): HTMLPyriteXwaBriefingElement;
    };
    interface HTMLPyriteXwaEventElement extends Components.PyriteXwaEvent, HTMLStencilElement {
    }
    var HTMLPyriteXwaEventElement: {
        prototype: HTMLPyriteXwaEventElement;
        new (): HTMLPyriteXwaEventElement;
    };
    interface HTMLPyriteXwaFileHeaderElement extends Components.PyriteXwaFileHeader, HTMLStencilElement {
    }
    var HTMLPyriteXwaFileHeaderElement: {
        prototype: HTMLPyriteXwaFileHeaderElement;
        new (): HTMLPyriteXwaFileHeaderElement;
    };
    interface HTMLPyriteXwaFlightGroupElement extends Components.PyriteXwaFlightGroup, HTMLStencilElement {
    }
    var HTMLPyriteXwaFlightGroupElement: {
        prototype: HTMLPyriteXwaFlightGroupElement;
        new (): HTMLPyriteXwaFlightGroupElement;
    };
    interface HTMLPyriteXwaGlobalCargoElement extends Components.PyriteXwaGlobalCargo, HTMLStencilElement {
    }
    var HTMLPyriteXwaGlobalCargoElement: {
        prototype: HTMLPyriteXwaGlobalCargoElement;
        new (): HTMLPyriteXwaGlobalCargoElement;
    };
    interface HTMLPyriteXwaGlobalGoalElement extends Components.PyriteXwaGlobalGoal, HTMLStencilElement {
    }
    var HTMLPyriteXwaGlobalGoalElement: {
        prototype: HTMLPyriteXwaGlobalGoalElement;
        new (): HTMLPyriteXwaGlobalGoalElement;
    };
    interface HTMLPyriteXwaGoalFgElement extends Components.PyriteXwaGoalFg, HTMLStencilElement {
    }
    var HTMLPyriteXwaGoalFgElement: {
        prototype: HTMLPyriteXwaGoalFgElement;
        new (): HTMLPyriteXwaGoalFgElement;
    };
    interface HTMLPyriteXwaGoalGlobalElement extends Components.PyriteXwaGoalGlobal, HTMLStencilElement {
    }
    var HTMLPyriteXwaGoalGlobalElement: {
        prototype: HTMLPyriteXwaGoalGlobalElement;
        new (): HTMLPyriteXwaGoalGlobalElement;
    };
    interface HTMLPyriteXwaLengthStringElement extends Components.PyriteXwaLengthString, HTMLStencilElement {
    }
    var HTMLPyriteXwaLengthStringElement: {
        prototype: HTMLPyriteXwaLengthStringElement;
        new (): HTMLPyriteXwaLengthStringElement;
    };
    interface HTMLPyriteXwaMessageElement extends Components.PyriteXwaMessage, HTMLStencilElement {
    }
    var HTMLPyriteXwaMessageElement: {
        prototype: HTMLPyriteXwaMessageElement;
        new (): HTMLPyriteXwaMessageElement;
    };
    interface HTMLPyriteXwaMissionElement extends Components.PyriteXwaMission, HTMLStencilElement {
    }
    var HTMLPyriteXwaMissionElement: {
        prototype: HTMLPyriteXwaMissionElement;
        new (): HTMLPyriteXwaMissionElement;
    };
    interface HTMLPyriteXwaMissionDataElement extends Components.PyriteXwaMissionData, HTMLStencilElement {
    }
    var HTMLPyriteXwaMissionDataElement: {
        prototype: HTMLPyriteXwaMissionDataElement;
        new (): HTMLPyriteXwaMissionDataElement;
    };
    interface HTMLPyriteXwaOrderElement extends Components.PyriteXwaOrder, HTMLStencilElement {
    }
    var HTMLPyriteXwaOrderElement: {
        prototype: HTMLPyriteXwaOrderElement;
        new (): HTMLPyriteXwaOrderElement;
    };
    interface HTMLPyriteXwaPilotFileElement extends Components.PyriteXwaPilotFile, HTMLStencilElement {
    }
    var HTMLPyriteXwaPilotFileElement: {
        prototype: HTMLPyriteXwaPilotFileElement;
        new (): HTMLPyriteXwaPilotFileElement;
    };
    interface HTMLPyriteXwaSkipElement extends Components.PyriteXwaSkip, HTMLStencilElement {
    }
    var HTMLPyriteXwaSkipElement: {
        prototype: HTMLPyriteXwaSkipElement;
        new (): HTMLPyriteXwaSkipElement;
    };
    interface HTMLPyriteXwaTagElement extends Components.PyriteXwaTag, HTMLStencilElement {
    }
    var HTMLPyriteXwaTagElement: {
        prototype: HTMLPyriteXwaTagElement;
        new (): HTMLPyriteXwaTagElement;
    };
    interface HTMLPyriteXwaTeamElement extends Components.PyriteXwaTeam, HTMLStencilElement {
    }
    var HTMLPyriteXwaTeamElement: {
        prototype: HTMLPyriteXwaTeamElement;
        new (): HTMLPyriteXwaTeamElement;
    };
    interface HTMLPyriteXwaTriggerElement extends Components.PyriteXwaTrigger, HTMLStencilElement {
    }
    var HTMLPyriteXwaTriggerElement: {
        prototype: HTMLPyriteXwaTriggerElement;
        new (): HTMLPyriteXwaTriggerElement;
    };
    interface HTMLPyriteXwaWayptElement extends Components.PyriteXwaWaypt, HTMLStencilElement {
    }
    var HTMLPyriteXwaWayptElement: {
        prototype: HTMLPyriteXwaWayptElement;
        new (): HTMLPyriteXwaWayptElement;
    };
    interface HTMLPyriteXwaXwaStringElement extends Components.PyriteXwaXwaString, HTMLStencilElement {
    }
    var HTMLPyriteXwaXwaStringElement: {
        prototype: HTMLPyriteXwaXwaStringElement;
        new (): HTMLPyriteXwaXwaStringElement;
    };
    interface HTMLElementTagNameMap {
        "ehtc-api-select": HTMLEhtcApiSelectElement;
        "ehtc-api-store": HTMLEhtcApiStoreElement;
        "ehtc-battle": HTMLEhtcBattleElement;
        "ehtc-battle-center": HTMLEhtcBattleCenterElement;
        "ehtc-battle-select": HTMLEhtcBattleSelectElement;
        "ehtc-member-select": HTMLEhtcMemberSelectElement;
        "ehtc-pilot": HTMLEhtcPilotElement;
        "ehtc-wrap-select": HTMLEhtcWrapSelectElement;
        "pyrite-frown": HTMLPyriteFrownElement;
        "pyrite-lfd": HTMLPyriteLfdElement;
        "pyrite-lfd-battle-text": HTMLPyriteLfdBattleTextElement;
        "pyrite-lfd-delt": HTMLPyriteLfdDeltElement;
        "pyrite-lfd-header": HTMLPyriteLfdHeaderElement;
        "pyrite-lfd-l-string": HTMLPyriteLfdLStringElement;
        "pyrite-lfd-l-text": HTMLPyriteLfdLTextElement;
        "pyrite-lfd-op-code": HTMLPyriteLfdOpCodeElement;
        "pyrite-lfd-rmap": HTMLPyriteLfdRmapElement;
        "pyrite-lfd-row": HTMLPyriteLfdRowElement;
        "pyrite-lfd-tie-battle": HTMLPyriteLfdTieBattleElement;
        "pyrite-lfd-voic": HTMLPyriteLfdVoicElement;
        "pyrite-lfd-voic-data": HTMLPyriteLfdVoicDataElement;
        "pyrite-mission": HTMLPyriteMissionElement;
        "pyrite-mission-tabs": HTMLPyriteMissionTabsElement;
        "pyrite-mission-wrapper": HTMLPyriteMissionWrapperElement;
        "pyrite-pilot-file": HTMLPyritePilotFileElement;
        "pyrite-resource": HTMLPyriteResourceElement;
        "pyrite-resources": HTMLPyriteResourcesElement;
        "pyrite-tie-briefing": HTMLPyriteTieBriefingElement;
        "pyrite-tie-checklist": HTMLPyriteTieChecklistElement;
        "pyrite-tie-event": HTMLPyriteTieEventElement;
        "pyrite-tie-file-header": HTMLPyriteTieFileHeaderElement;
        "pyrite-tie-flight-group": HTMLPyriteTieFlightGroupElement;
        "pyrite-tie-flightgroup": HTMLPyriteTieFlightgroupElement;
        "pyrite-tie-flightgroups": HTMLPyriteTieFlightgroupsElement;
        "pyrite-tie-global-goal": HTMLPyriteTieGlobalGoalElement;
        "pyrite-tie-goal-fg": HTMLPyriteTieGoalFgElement;
        "pyrite-tie-message": HTMLPyriteTieMessageElement;
        "pyrite-tie-messages": HTMLPyriteTieMessagesElement;
        "pyrite-tie-mission": HTMLPyriteTieMissionElement;
        "pyrite-tie-order": HTMLPyriteTieOrderElement;
        "pyrite-tie-pilot-file": HTMLPyriteTiePilotFileElement;
        "pyrite-tie-post-mission-questions": HTMLPyriteTiePostMissionQuestionsElement;
        "pyrite-tie-pre-mission-questions": HTMLPyriteTiePreMissionQuestionsElement;
        "pyrite-tie-score": HTMLPyriteTieScoreElement;
        "pyrite-tie-tag": HTMLPyriteTieTagElement;
        "pyrite-tie-tie-string": HTMLPyriteTieTieStringElement;
        "pyrite-tie-trigger": HTMLPyriteTieTriggerElement;
        "pyrite-tie-waypt": HTMLPyriteTieWayptElement;
        "pyrite-xvt-briefing": HTMLPyriteXvtBriefingElement;
        "pyrite-xvt-event": HTMLPyriteXvtEventElement;
        "pyrite-xvt-file-header": HTMLPyriteXvtFileHeaderElement;
        "pyrite-xvt-flight-group": HTMLPyriteXvtFlightGroupElement;
        "pyrite-xvt-global-goal": HTMLPyriteXvtGlobalGoalElement;
        "pyrite-xvt-goal-fg": HTMLPyriteXvtGoalFgElement;
        "pyrite-xvt-goal-global": HTMLPyriteXvtGoalGlobalElement;
        "pyrite-xvt-message": HTMLPyriteXvtMessageElement;
        "pyrite-xvt-mission": HTMLPyriteXvtMissionElement;
        "pyrite-xvt-mission-bop": HTMLPyriteXvtMissionBopElement;
        "pyrite-xvt-mission-data": HTMLPyriteXvtMissionDataElement;
        "pyrite-xvt-order": HTMLPyriteXvtOrderElement;
        "pyrite-xvt-pilot-file": HTMLPyriteXvtPilotFileElement;
        "pyrite-xvt-role": HTMLPyriteXvtRoleElement;
        "pyrite-xvt-tag": HTMLPyriteXvtTagElement;
        "pyrite-xvt-team": HTMLPyriteXvtTeamElement;
        "pyrite-xvt-team-stats": HTMLPyriteXvtTeamStatsElement;
        "pyrite-xvt-trigger": HTMLPyriteXvtTriggerElement;
        "pyrite-xvt-waypt": HTMLPyriteXvtWayptElement;
        "pyrite-xvt-xv-t-string": HTMLPyriteXvtXvTStringElement;
        "pyrite-xw-briefing": HTMLPyriteXwBriefingElement;
        "pyrite-xw-briefing-header": HTMLPyriteXwBriefingHeaderElement;
        "pyrite-xw-coordinate": HTMLPyriteXwCoordinateElement;
        "pyrite-xw-file-header": HTMLPyriteXwFileHeaderElement;
        "pyrite-xw-flight-group": HTMLPyriteXwFlightGroupElement;
        "pyrite-xw-icon": HTMLPyriteXwIconElement;
        "pyrite-xw-mission": HTMLPyriteXwMissionElement;
        "pyrite-xw-mission-header": HTMLPyriteXwMissionHeaderElement;
        "pyrite-xw-object-group": HTMLPyriteXwObjectGroupElement;
        "pyrite-xw-page": HTMLPyriteXwPageElement;
        "pyrite-xw-pilot-file": HTMLPyriteXwPilotFileElement;
        "pyrite-xw-string": HTMLPyriteXwStringElement;
        "pyrite-xw-tag": HTMLPyriteXwTagElement;
        "pyrite-xw-viewport-setting": HTMLPyriteXwViewportSettingElement;
        "pyrite-xwa-briefing": HTMLPyriteXwaBriefingElement;
        "pyrite-xwa-event": HTMLPyriteXwaEventElement;
        "pyrite-xwa-file-header": HTMLPyriteXwaFileHeaderElement;
        "pyrite-xwa-flight-group": HTMLPyriteXwaFlightGroupElement;
        "pyrite-xwa-global-cargo": HTMLPyriteXwaGlobalCargoElement;
        "pyrite-xwa-global-goal": HTMLPyriteXwaGlobalGoalElement;
        "pyrite-xwa-goal-fg": HTMLPyriteXwaGoalFgElement;
        "pyrite-xwa-goal-global": HTMLPyriteXwaGoalGlobalElement;
        "pyrite-xwa-length-string": HTMLPyriteXwaLengthStringElement;
        "pyrite-xwa-message": HTMLPyriteXwaMessageElement;
        "pyrite-xwa-mission": HTMLPyriteXwaMissionElement;
        "pyrite-xwa-mission-data": HTMLPyriteXwaMissionDataElement;
        "pyrite-xwa-order": HTMLPyriteXwaOrderElement;
        "pyrite-xwa-pilot-file": HTMLPyriteXwaPilotFileElement;
        "pyrite-xwa-skip": HTMLPyriteXwaSkipElement;
        "pyrite-xwa-tag": HTMLPyriteXwaTagElement;
        "pyrite-xwa-team": HTMLPyriteXwaTeamElement;
        "pyrite-xwa-trigger": HTMLPyriteXwaTriggerElement;
        "pyrite-xwa-waypt": HTMLPyriteXwaWayptElement;
        "pyrite-xwa-xwa-string": HTMLPyriteXwaXwaStringElement;
    }
}
declare namespace LocalJSX {
    interface EhtcApiSelect {
        "domain"?: string;
        "item"?: ApiSummary;
        "name"?: string;
        "onApiSelect"?: (event: EhtcApiSelectCustomEvent<ApiSummary>) => void;
        "url"?: string;
        "value"?: string;
    }
    interface EhtcApiStore {
        "cachePrefix"?: string;
        "domain"?: string;
    }
    interface EhtcBattle {
        "battle"?: Battle;
        "code"?: string;
        "onDownloadBattle"?: (event: EhtcBattleCustomEvent<Battle>) => void;
    }
    interface EhtcBattleCenter {
    }
    interface EhtcBattleSelect {
        "battle"?: BattleSummary;
        "category"?: string;
        "disabled"?: boolean;
        "domain"?: string;
        "name"?: string;
        "onBattleSelect"?: (event: EhtcBattleSelectCustomEvent<BattleSummary>) => void;
        "readonly"?: boolean;
        "value"?: string;
    }
    interface EhtcMemberSelect {
        "disabled"?: boolean;
        "domain"?: string;
        "filter"?: string;
        "mode"?: "character" | "pilot" | "group-characters";
        "name"?: string;
        "onMemberSelect"?: (event: EhtcMemberSelectCustomEvent<PilotSummary | CharacterSummary>) => void;
        "readonly"?: boolean;
        "status"?: "active" | "all";
        "value"?: string;
    }
    interface EhtcPilot {
        "pin"?: number;
        "secondary"?: boolean;
    }
    interface EhtcWrapSelect {
        "disabled"?: boolean;
        "item"?: ItemSummary;
        "name"?: string;
        "onItemSelect"?: (event: EhtcWrapSelectCustomEvent<ItemSummary>) => void;
        "readonly"?: boolean;
        "value"?: string;
    }
    interface PyriteFrown {
        "mission"?: Mission;
        "showButtons"?: boolean;
    }
    interface PyriteLfd {
        "file"?: string;
    }
    interface PyriteLfdBattleText {
        "battletext"?: BattleText;
    }
    interface PyriteLfdDelt {
        "delt"?: Delt;
    }
    interface PyriteLfdHeader {
        "header"?: Header;
    }
    interface PyriteLfdLString {
        "lstring"?: LString;
    }
    interface PyriteLfdLText {
        "ltext"?: LText;
    }
    interface PyriteLfdOpCode {
        "opcode"?: OpCode;
    }
    interface PyriteLfdRmap {
        "rmap"?: Rmap;
    }
    interface PyriteLfdRow {
        "row"?: Row;
    }
    interface PyriteLfdTieBattle {
        "tiebattle"?: TIEBattle;
    }
    interface PyriteLfdVoic {
        "voic"?: Voic;
    }
    interface PyriteLfdVoicData {
        "voicdata"?: VoicData;
    }
    interface PyriteMission {
        "file"?: string;
        "name"?: string;
        "nr"?: string;
        "plt"?: string;
        "sub"?: string;
    }
    interface PyriteMissionTabs {
    }
    interface PyriteMissionWrapper {
        "file"?: string;
    }
    interface PyritePilotFile {
        "allowUpload"?: boolean;
        "bsf"?: string;
        "file"?: string;
    }
    interface PyriteResource {
        "name"?: string;
    }
    interface PyriteResources {
    }
    interface PyriteTieBriefing {
        "mission"?: Mission1;
    }
    interface PyriteTieChecklist {
        "lfdUrl"?: string;
        "missionUrl"?: string;
    }
    interface PyriteTieEvent {
        "event"?: Event;
    }
    interface PyriteTieFileHeader {
        "fileheader"?: FileHeader;
    }
    interface PyriteTieFlightGroup {
        "flightgroup"?: FlightGroup;
    }
    interface PyriteTieFlightgroup {
        "flightGroup"?: FlightGroup;
    }
    interface PyriteTieFlightgroups {
        "mission"?: Mission;
    }
    interface PyriteTieGlobalGoal {
        "globalgoal"?: GlobalGoal;
    }
    interface PyriteTieGoalFg {
        "goalfg"?: GoalFG;
    }
    interface PyriteTieMessage {
        "message"?: Message;
    }
    interface PyriteTieMessages {
        "mission"?: Mission;
    }
    interface PyriteTieMission {
        "file"?: string;
    }
    interface PyriteTieOrder {
        "order"?: Order;
    }
    interface PyriteTiePilotFile {
        "pilotfile"?: PilotFile;
    }
    interface PyriteTiePostMissionQuestions {
        "postmissionquestions"?: PostMissionQuestions;
    }
    interface PyriteTiePreMissionQuestions {
        "premissionquestions"?: PreMissionQuestions;
    }
    interface PyriteTieScore {
        "mission"?: Mission;
    }
    interface PyriteTieTag {
        "tag"?: Tag;
    }
    interface PyriteTieTieString {
        "tiestring"?: TIEString;
    }
    interface PyriteTieTrigger {
        "trigger"?: Trigger;
    }
    interface PyriteTieWaypt {
        "waypt"?: Waypt;
    }
    interface PyriteXvtBriefing {
        "briefing"?: Briefing;
    }
    interface PyriteXvtEvent {
        "event"?: Event1;
    }
    interface PyriteXvtFileHeader {
        "fileheader"?: FileHeader1;
    }
    interface PyriteXvtFlightGroup {
        "flightgroup"?: FlightGroup1;
    }
    interface PyriteXvtGlobalGoal {
        "globalgoal"?: GlobalGoal1;
    }
    interface PyriteXvtGoalFg {
        "goalfg"?: GoalFG1;
    }
    interface PyriteXvtGoalGlobal {
        "goalglobal"?: GoalGlobal;
    }
    interface PyriteXvtMessage {
        "message"?: Message1;
    }
    interface PyriteXvtMission {
        "mission"?: Mission2;
    }
    interface PyriteXvtMissionBop {
        "missionbop"?: MissionBOP;
    }
    interface PyriteXvtMissionData {
        "missiondata"?: MissionData;
    }
    interface PyriteXvtOrder {
        "order"?: Order1;
    }
    interface PyriteXvtPilotFile {
        "pilotfile"?: PilotFile1;
    }
    interface PyriteXvtRole {
        "xvtrole"?: Role;
    }
    interface PyriteXvtTag {
        "tag"?: Tag1;
    }
    interface PyriteXvtTeam {
        "team"?: Team;
    }
    interface PyriteXvtTeamStats {
        "teamstats"?: TeamStats;
    }
    interface PyriteXvtTrigger {
        "trigger"?: Trigger1;
    }
    interface PyriteXvtWaypt {
        "waypt"?: Waypt1;
    }
    interface PyriteXvtXvTString {
        "xvtstring"?: XvTString;
    }
    interface PyriteXwBriefing {
        "briefing"?: Briefing1;
    }
    interface PyriteXwBriefingHeader {
        "briefingheader"?: BriefingHeader;
    }
    interface PyriteXwCoordinate {
        "coordinate"?: Coordinate;
    }
    interface PyriteXwFileHeader {
        "fileheader"?: FileHeader2;
    }
    interface PyriteXwFlightGroup {
        "flightgroup"?: FlightGroup2;
    }
    interface PyriteXwIcon {
        "icon"?: Icon;
    }
    interface PyriteXwMission {
        "mission"?: Mission3;
    }
    interface PyriteXwMissionHeader {
        "missionheader"?: MissionHeader;
    }
    interface PyriteXwObjectGroup {
        "objectgroup"?: ObjectGroup;
    }
    interface PyriteXwPage {
        "page"?: Page;
    }
    interface PyriteXwPilotFile {
        "pilotfile"?: PilotFile2;
    }
    interface PyriteXwString {
        "string"?: String;
    }
    interface PyriteXwTag {
        "tag"?: Tag2;
    }
    interface PyriteXwViewportSetting {
        "viewportsetting"?: ViewportSetting;
    }
    interface PyriteXwaBriefing {
        "briefing"?: Briefing2;
    }
    interface PyriteXwaEvent {
        "event"?: Event2;
    }
    interface PyriteXwaFileHeader {
        "fileheader"?: FileHeader3;
    }
    interface PyriteXwaFlightGroup {
        "flightgroup"?: FlightGroup3;
    }
    interface PyriteXwaGlobalCargo {
        "globalcargo"?: GlobalCargo;
    }
    interface PyriteXwaGlobalGoal {
        "globalgoal"?: GlobalGoal2;
    }
    interface PyriteXwaGoalFg {
        "goalfg"?: GoalFG2;
    }
    interface PyriteXwaGoalGlobal {
        "goalglobal"?: GoalGlobal1;
    }
    interface PyriteXwaLengthString {
        "lengthstring"?: LengthString;
    }
    interface PyriteXwaMessage {
        "message"?: Message2;
    }
    interface PyriteXwaMission {
        "mission"?: Mission4;
    }
    interface PyriteXwaMissionData {
        "missiondata"?: MissionData1;
    }
    interface PyriteXwaOrder {
        "order"?: Order2;
    }
    interface PyriteXwaPilotFile {
        "pilotfile"?: PilotFile3;
    }
    interface PyriteXwaSkip {
        "skip"?: Skip;
    }
    interface PyriteXwaTag {
        "tag"?: Tag3;
    }
    interface PyriteXwaTeam {
        "team"?: Team1;
    }
    interface PyriteXwaTrigger {
        "trigger"?: Trigger2;
    }
    interface PyriteXwaWaypt {
        "waypt"?: Waypt2;
    }
    interface PyriteXwaXwaString {
        "xwastring"?: XWAString;
    }
    interface IntrinsicElements {
        "ehtc-api-select": EhtcApiSelect;
        "ehtc-api-store": EhtcApiStore;
        "ehtc-battle": EhtcBattle;
        "ehtc-battle-center": EhtcBattleCenter;
        "ehtc-battle-select": EhtcBattleSelect;
        "ehtc-member-select": EhtcMemberSelect;
        "ehtc-pilot": EhtcPilot;
        "ehtc-wrap-select": EhtcWrapSelect;
        "pyrite-frown": PyriteFrown;
        "pyrite-lfd": PyriteLfd;
        "pyrite-lfd-battle-text": PyriteLfdBattleText;
        "pyrite-lfd-delt": PyriteLfdDelt;
        "pyrite-lfd-header": PyriteLfdHeader;
        "pyrite-lfd-l-string": PyriteLfdLString;
        "pyrite-lfd-l-text": PyriteLfdLText;
        "pyrite-lfd-op-code": PyriteLfdOpCode;
        "pyrite-lfd-rmap": PyriteLfdRmap;
        "pyrite-lfd-row": PyriteLfdRow;
        "pyrite-lfd-tie-battle": PyriteLfdTieBattle;
        "pyrite-lfd-voic": PyriteLfdVoic;
        "pyrite-lfd-voic-data": PyriteLfdVoicData;
        "pyrite-mission": PyriteMission;
        "pyrite-mission-tabs": PyriteMissionTabs;
        "pyrite-mission-wrapper": PyriteMissionWrapper;
        "pyrite-pilot-file": PyritePilotFile;
        "pyrite-resource": PyriteResource;
        "pyrite-resources": PyriteResources;
        "pyrite-tie-briefing": PyriteTieBriefing;
        "pyrite-tie-checklist": PyriteTieChecklist;
        "pyrite-tie-event": PyriteTieEvent;
        "pyrite-tie-file-header": PyriteTieFileHeader;
        "pyrite-tie-flight-group": PyriteTieFlightGroup;
        "pyrite-tie-flightgroup": PyriteTieFlightgroup;
        "pyrite-tie-flightgroups": PyriteTieFlightgroups;
        "pyrite-tie-global-goal": PyriteTieGlobalGoal;
        "pyrite-tie-goal-fg": PyriteTieGoalFg;
        "pyrite-tie-message": PyriteTieMessage;
        "pyrite-tie-messages": PyriteTieMessages;
        "pyrite-tie-mission": PyriteTieMission;
        "pyrite-tie-order": PyriteTieOrder;
        "pyrite-tie-pilot-file": PyriteTiePilotFile;
        "pyrite-tie-post-mission-questions": PyriteTiePostMissionQuestions;
        "pyrite-tie-pre-mission-questions": PyriteTiePreMissionQuestions;
        "pyrite-tie-score": PyriteTieScore;
        "pyrite-tie-tag": PyriteTieTag;
        "pyrite-tie-tie-string": PyriteTieTieString;
        "pyrite-tie-trigger": PyriteTieTrigger;
        "pyrite-tie-waypt": PyriteTieWaypt;
        "pyrite-xvt-briefing": PyriteXvtBriefing;
        "pyrite-xvt-event": PyriteXvtEvent;
        "pyrite-xvt-file-header": PyriteXvtFileHeader;
        "pyrite-xvt-flight-group": PyriteXvtFlightGroup;
        "pyrite-xvt-global-goal": PyriteXvtGlobalGoal;
        "pyrite-xvt-goal-fg": PyriteXvtGoalFg;
        "pyrite-xvt-goal-global": PyriteXvtGoalGlobal;
        "pyrite-xvt-message": PyriteXvtMessage;
        "pyrite-xvt-mission": PyriteXvtMission;
        "pyrite-xvt-mission-bop": PyriteXvtMissionBop;
        "pyrite-xvt-mission-data": PyriteXvtMissionData;
        "pyrite-xvt-order": PyriteXvtOrder;
        "pyrite-xvt-pilot-file": PyriteXvtPilotFile;
        "pyrite-xvt-role": PyriteXvtRole;
        "pyrite-xvt-tag": PyriteXvtTag;
        "pyrite-xvt-team": PyriteXvtTeam;
        "pyrite-xvt-team-stats": PyriteXvtTeamStats;
        "pyrite-xvt-trigger": PyriteXvtTrigger;
        "pyrite-xvt-waypt": PyriteXvtWaypt;
        "pyrite-xvt-xv-t-string": PyriteXvtXvTString;
        "pyrite-xw-briefing": PyriteXwBriefing;
        "pyrite-xw-briefing-header": PyriteXwBriefingHeader;
        "pyrite-xw-coordinate": PyriteXwCoordinate;
        "pyrite-xw-file-header": PyriteXwFileHeader;
        "pyrite-xw-flight-group": PyriteXwFlightGroup;
        "pyrite-xw-icon": PyriteXwIcon;
        "pyrite-xw-mission": PyriteXwMission;
        "pyrite-xw-mission-header": PyriteXwMissionHeader;
        "pyrite-xw-object-group": PyriteXwObjectGroup;
        "pyrite-xw-page": PyriteXwPage;
        "pyrite-xw-pilot-file": PyriteXwPilotFile;
        "pyrite-xw-string": PyriteXwString;
        "pyrite-xw-tag": PyriteXwTag;
        "pyrite-xw-viewport-setting": PyriteXwViewportSetting;
        "pyrite-xwa-briefing": PyriteXwaBriefing;
        "pyrite-xwa-event": PyriteXwaEvent;
        "pyrite-xwa-file-header": PyriteXwaFileHeader;
        "pyrite-xwa-flight-group": PyriteXwaFlightGroup;
        "pyrite-xwa-global-cargo": PyriteXwaGlobalCargo;
        "pyrite-xwa-global-goal": PyriteXwaGlobalGoal;
        "pyrite-xwa-goal-fg": PyriteXwaGoalFg;
        "pyrite-xwa-goal-global": PyriteXwaGoalGlobal;
        "pyrite-xwa-length-string": PyriteXwaLengthString;
        "pyrite-xwa-message": PyriteXwaMessage;
        "pyrite-xwa-mission": PyriteXwaMission;
        "pyrite-xwa-mission-data": PyriteXwaMissionData;
        "pyrite-xwa-order": PyriteXwaOrder;
        "pyrite-xwa-pilot-file": PyriteXwaPilotFile;
        "pyrite-xwa-skip": PyriteXwaSkip;
        "pyrite-xwa-tag": PyriteXwaTag;
        "pyrite-xwa-team": PyriteXwaTeam;
        "pyrite-xwa-trigger": PyriteXwaTrigger;
        "pyrite-xwa-waypt": PyriteXwaWaypt;
        "pyrite-xwa-xwa-string": PyriteXwaXwaString;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ehtc-api-select": LocalJSX.EhtcApiSelect & JSXBase.HTMLAttributes<HTMLEhtcApiSelectElement>;
            "ehtc-api-store": LocalJSX.EhtcApiStore & JSXBase.HTMLAttributes<HTMLEhtcApiStoreElement>;
            "ehtc-battle": LocalJSX.EhtcBattle & JSXBase.HTMLAttributes<HTMLEhtcBattleElement>;
            "ehtc-battle-center": LocalJSX.EhtcBattleCenter & JSXBase.HTMLAttributes<HTMLEhtcBattleCenterElement>;
            "ehtc-battle-select": LocalJSX.EhtcBattleSelect & JSXBase.HTMLAttributes<HTMLEhtcBattleSelectElement>;
            "ehtc-member-select": LocalJSX.EhtcMemberSelect & JSXBase.HTMLAttributes<HTMLEhtcMemberSelectElement>;
            "ehtc-pilot": LocalJSX.EhtcPilot & JSXBase.HTMLAttributes<HTMLEhtcPilotElement>;
            "ehtc-wrap-select": LocalJSX.EhtcWrapSelect & JSXBase.HTMLAttributes<HTMLEhtcWrapSelectElement>;
            "pyrite-frown": LocalJSX.PyriteFrown & JSXBase.HTMLAttributes<HTMLPyriteFrownElement>;
            "pyrite-lfd": LocalJSX.PyriteLfd & JSXBase.HTMLAttributes<HTMLPyriteLfdElement>;
            "pyrite-lfd-battle-text": LocalJSX.PyriteLfdBattleText & JSXBase.HTMLAttributes<HTMLPyriteLfdBattleTextElement>;
            "pyrite-lfd-delt": LocalJSX.PyriteLfdDelt & JSXBase.HTMLAttributes<HTMLPyriteLfdDeltElement>;
            "pyrite-lfd-header": LocalJSX.PyriteLfdHeader & JSXBase.HTMLAttributes<HTMLPyriteLfdHeaderElement>;
            "pyrite-lfd-l-string": LocalJSX.PyriteLfdLString & JSXBase.HTMLAttributes<HTMLPyriteLfdLStringElement>;
            "pyrite-lfd-l-text": LocalJSX.PyriteLfdLText & JSXBase.HTMLAttributes<HTMLPyriteLfdLTextElement>;
            "pyrite-lfd-op-code": LocalJSX.PyriteLfdOpCode & JSXBase.HTMLAttributes<HTMLPyriteLfdOpCodeElement>;
            "pyrite-lfd-rmap": LocalJSX.PyriteLfdRmap & JSXBase.HTMLAttributes<HTMLPyriteLfdRmapElement>;
            "pyrite-lfd-row": LocalJSX.PyriteLfdRow & JSXBase.HTMLAttributes<HTMLPyriteLfdRowElement>;
            "pyrite-lfd-tie-battle": LocalJSX.PyriteLfdTieBattle & JSXBase.HTMLAttributes<HTMLPyriteLfdTieBattleElement>;
            "pyrite-lfd-voic": LocalJSX.PyriteLfdVoic & JSXBase.HTMLAttributes<HTMLPyriteLfdVoicElement>;
            "pyrite-lfd-voic-data": LocalJSX.PyriteLfdVoicData & JSXBase.HTMLAttributes<HTMLPyriteLfdVoicDataElement>;
            "pyrite-mission": LocalJSX.PyriteMission & JSXBase.HTMLAttributes<HTMLPyriteMissionElement>;
            "pyrite-mission-tabs": LocalJSX.PyriteMissionTabs & JSXBase.HTMLAttributes<HTMLPyriteMissionTabsElement>;
            "pyrite-mission-wrapper": LocalJSX.PyriteMissionWrapper & JSXBase.HTMLAttributes<HTMLPyriteMissionWrapperElement>;
            "pyrite-pilot-file": LocalJSX.PyritePilotFile & JSXBase.HTMLAttributes<HTMLPyritePilotFileElement>;
            "pyrite-resource": LocalJSX.PyriteResource & JSXBase.HTMLAttributes<HTMLPyriteResourceElement>;
            "pyrite-resources": LocalJSX.PyriteResources & JSXBase.HTMLAttributes<HTMLPyriteResourcesElement>;
            "pyrite-tie-briefing": LocalJSX.PyriteTieBriefing & JSXBase.HTMLAttributes<HTMLPyriteTieBriefingElement>;
            "pyrite-tie-checklist": LocalJSX.PyriteTieChecklist & JSXBase.HTMLAttributes<HTMLPyriteTieChecklistElement>;
            "pyrite-tie-event": LocalJSX.PyriteTieEvent & JSXBase.HTMLAttributes<HTMLPyriteTieEventElement>;
            "pyrite-tie-file-header": LocalJSX.PyriteTieFileHeader & JSXBase.HTMLAttributes<HTMLPyriteTieFileHeaderElement>;
            "pyrite-tie-flight-group": LocalJSX.PyriteTieFlightGroup & JSXBase.HTMLAttributes<HTMLPyriteTieFlightGroupElement>;
            "pyrite-tie-flightgroup": LocalJSX.PyriteTieFlightgroup & JSXBase.HTMLAttributes<HTMLPyriteTieFlightgroupElement>;
            "pyrite-tie-flightgroups": LocalJSX.PyriteTieFlightgroups & JSXBase.HTMLAttributes<HTMLPyriteTieFlightgroupsElement>;
            "pyrite-tie-global-goal": LocalJSX.PyriteTieGlobalGoal & JSXBase.HTMLAttributes<HTMLPyriteTieGlobalGoalElement>;
            "pyrite-tie-goal-fg": LocalJSX.PyriteTieGoalFg & JSXBase.HTMLAttributes<HTMLPyriteTieGoalFgElement>;
            "pyrite-tie-message": LocalJSX.PyriteTieMessage & JSXBase.HTMLAttributes<HTMLPyriteTieMessageElement>;
            "pyrite-tie-messages": LocalJSX.PyriteTieMessages & JSXBase.HTMLAttributes<HTMLPyriteTieMessagesElement>;
            "pyrite-tie-mission": LocalJSX.PyriteTieMission & JSXBase.HTMLAttributes<HTMLPyriteTieMissionElement>;
            "pyrite-tie-order": LocalJSX.PyriteTieOrder & JSXBase.HTMLAttributes<HTMLPyriteTieOrderElement>;
            "pyrite-tie-pilot-file": LocalJSX.PyriteTiePilotFile & JSXBase.HTMLAttributes<HTMLPyriteTiePilotFileElement>;
            "pyrite-tie-post-mission-questions": LocalJSX.PyriteTiePostMissionQuestions & JSXBase.HTMLAttributes<HTMLPyriteTiePostMissionQuestionsElement>;
            "pyrite-tie-pre-mission-questions": LocalJSX.PyriteTiePreMissionQuestions & JSXBase.HTMLAttributes<HTMLPyriteTiePreMissionQuestionsElement>;
            "pyrite-tie-score": LocalJSX.PyriteTieScore & JSXBase.HTMLAttributes<HTMLPyriteTieScoreElement>;
            "pyrite-tie-tag": LocalJSX.PyriteTieTag & JSXBase.HTMLAttributes<HTMLPyriteTieTagElement>;
            "pyrite-tie-tie-string": LocalJSX.PyriteTieTieString & JSXBase.HTMLAttributes<HTMLPyriteTieTieStringElement>;
            "pyrite-tie-trigger": LocalJSX.PyriteTieTrigger & JSXBase.HTMLAttributes<HTMLPyriteTieTriggerElement>;
            "pyrite-tie-waypt": LocalJSX.PyriteTieWaypt & JSXBase.HTMLAttributes<HTMLPyriteTieWayptElement>;
            "pyrite-xvt-briefing": LocalJSX.PyriteXvtBriefing & JSXBase.HTMLAttributes<HTMLPyriteXvtBriefingElement>;
            "pyrite-xvt-event": LocalJSX.PyriteXvtEvent & JSXBase.HTMLAttributes<HTMLPyriteXvtEventElement>;
            "pyrite-xvt-file-header": LocalJSX.PyriteXvtFileHeader & JSXBase.HTMLAttributes<HTMLPyriteXvtFileHeaderElement>;
            "pyrite-xvt-flight-group": LocalJSX.PyriteXvtFlightGroup & JSXBase.HTMLAttributes<HTMLPyriteXvtFlightGroupElement>;
            "pyrite-xvt-global-goal": LocalJSX.PyriteXvtGlobalGoal & JSXBase.HTMLAttributes<HTMLPyriteXvtGlobalGoalElement>;
            "pyrite-xvt-goal-fg": LocalJSX.PyriteXvtGoalFg & JSXBase.HTMLAttributes<HTMLPyriteXvtGoalFgElement>;
            "pyrite-xvt-goal-global": LocalJSX.PyriteXvtGoalGlobal & JSXBase.HTMLAttributes<HTMLPyriteXvtGoalGlobalElement>;
            "pyrite-xvt-message": LocalJSX.PyriteXvtMessage & JSXBase.HTMLAttributes<HTMLPyriteXvtMessageElement>;
            "pyrite-xvt-mission": LocalJSX.PyriteXvtMission & JSXBase.HTMLAttributes<HTMLPyriteXvtMissionElement>;
            "pyrite-xvt-mission-bop": LocalJSX.PyriteXvtMissionBop & JSXBase.HTMLAttributes<HTMLPyriteXvtMissionBopElement>;
            "pyrite-xvt-mission-data": LocalJSX.PyriteXvtMissionData & JSXBase.HTMLAttributes<HTMLPyriteXvtMissionDataElement>;
            "pyrite-xvt-order": LocalJSX.PyriteXvtOrder & JSXBase.HTMLAttributes<HTMLPyriteXvtOrderElement>;
            "pyrite-xvt-pilot-file": LocalJSX.PyriteXvtPilotFile & JSXBase.HTMLAttributes<HTMLPyriteXvtPilotFileElement>;
            "pyrite-xvt-role": LocalJSX.PyriteXvtRole & JSXBase.HTMLAttributes<HTMLPyriteXvtRoleElement>;
            "pyrite-xvt-tag": LocalJSX.PyriteXvtTag & JSXBase.HTMLAttributes<HTMLPyriteXvtTagElement>;
            "pyrite-xvt-team": LocalJSX.PyriteXvtTeam & JSXBase.HTMLAttributes<HTMLPyriteXvtTeamElement>;
            "pyrite-xvt-team-stats": LocalJSX.PyriteXvtTeamStats & JSXBase.HTMLAttributes<HTMLPyriteXvtTeamStatsElement>;
            "pyrite-xvt-trigger": LocalJSX.PyriteXvtTrigger & JSXBase.HTMLAttributes<HTMLPyriteXvtTriggerElement>;
            "pyrite-xvt-waypt": LocalJSX.PyriteXvtWaypt & JSXBase.HTMLAttributes<HTMLPyriteXvtWayptElement>;
            "pyrite-xvt-xv-t-string": LocalJSX.PyriteXvtXvTString & JSXBase.HTMLAttributes<HTMLPyriteXvtXvTStringElement>;
            "pyrite-xw-briefing": LocalJSX.PyriteXwBriefing & JSXBase.HTMLAttributes<HTMLPyriteXwBriefingElement>;
            "pyrite-xw-briefing-header": LocalJSX.PyriteXwBriefingHeader & JSXBase.HTMLAttributes<HTMLPyriteXwBriefingHeaderElement>;
            "pyrite-xw-coordinate": LocalJSX.PyriteXwCoordinate & JSXBase.HTMLAttributes<HTMLPyriteXwCoordinateElement>;
            "pyrite-xw-file-header": LocalJSX.PyriteXwFileHeader & JSXBase.HTMLAttributes<HTMLPyriteXwFileHeaderElement>;
            "pyrite-xw-flight-group": LocalJSX.PyriteXwFlightGroup & JSXBase.HTMLAttributes<HTMLPyriteXwFlightGroupElement>;
            "pyrite-xw-icon": LocalJSX.PyriteXwIcon & JSXBase.HTMLAttributes<HTMLPyriteXwIconElement>;
            "pyrite-xw-mission": LocalJSX.PyriteXwMission & JSXBase.HTMLAttributes<HTMLPyriteXwMissionElement>;
            "pyrite-xw-mission-header": LocalJSX.PyriteXwMissionHeader & JSXBase.HTMLAttributes<HTMLPyriteXwMissionHeaderElement>;
            "pyrite-xw-object-group": LocalJSX.PyriteXwObjectGroup & JSXBase.HTMLAttributes<HTMLPyriteXwObjectGroupElement>;
            "pyrite-xw-page": LocalJSX.PyriteXwPage & JSXBase.HTMLAttributes<HTMLPyriteXwPageElement>;
            "pyrite-xw-pilot-file": LocalJSX.PyriteXwPilotFile & JSXBase.HTMLAttributes<HTMLPyriteXwPilotFileElement>;
            "pyrite-xw-string": LocalJSX.PyriteXwString & JSXBase.HTMLAttributes<HTMLPyriteXwStringElement>;
            "pyrite-xw-tag": LocalJSX.PyriteXwTag & JSXBase.HTMLAttributes<HTMLPyriteXwTagElement>;
            "pyrite-xw-viewport-setting": LocalJSX.PyriteXwViewportSetting & JSXBase.HTMLAttributes<HTMLPyriteXwViewportSettingElement>;
            "pyrite-xwa-briefing": LocalJSX.PyriteXwaBriefing & JSXBase.HTMLAttributes<HTMLPyriteXwaBriefingElement>;
            "pyrite-xwa-event": LocalJSX.PyriteXwaEvent & JSXBase.HTMLAttributes<HTMLPyriteXwaEventElement>;
            "pyrite-xwa-file-header": LocalJSX.PyriteXwaFileHeader & JSXBase.HTMLAttributes<HTMLPyriteXwaFileHeaderElement>;
            "pyrite-xwa-flight-group": LocalJSX.PyriteXwaFlightGroup & JSXBase.HTMLAttributes<HTMLPyriteXwaFlightGroupElement>;
            "pyrite-xwa-global-cargo": LocalJSX.PyriteXwaGlobalCargo & JSXBase.HTMLAttributes<HTMLPyriteXwaGlobalCargoElement>;
            "pyrite-xwa-global-goal": LocalJSX.PyriteXwaGlobalGoal & JSXBase.HTMLAttributes<HTMLPyriteXwaGlobalGoalElement>;
            "pyrite-xwa-goal-fg": LocalJSX.PyriteXwaGoalFg & JSXBase.HTMLAttributes<HTMLPyriteXwaGoalFgElement>;
            "pyrite-xwa-goal-global": LocalJSX.PyriteXwaGoalGlobal & JSXBase.HTMLAttributes<HTMLPyriteXwaGoalGlobalElement>;
            "pyrite-xwa-length-string": LocalJSX.PyriteXwaLengthString & JSXBase.HTMLAttributes<HTMLPyriteXwaLengthStringElement>;
            "pyrite-xwa-message": LocalJSX.PyriteXwaMessage & JSXBase.HTMLAttributes<HTMLPyriteXwaMessageElement>;
            "pyrite-xwa-mission": LocalJSX.PyriteXwaMission & JSXBase.HTMLAttributes<HTMLPyriteXwaMissionElement>;
            "pyrite-xwa-mission-data": LocalJSX.PyriteXwaMissionData & JSXBase.HTMLAttributes<HTMLPyriteXwaMissionDataElement>;
            "pyrite-xwa-order": LocalJSX.PyriteXwaOrder & JSXBase.HTMLAttributes<HTMLPyriteXwaOrderElement>;
            "pyrite-xwa-pilot-file": LocalJSX.PyriteXwaPilotFile & JSXBase.HTMLAttributes<HTMLPyriteXwaPilotFileElement>;
            "pyrite-xwa-skip": LocalJSX.PyriteXwaSkip & JSXBase.HTMLAttributes<HTMLPyriteXwaSkipElement>;
            "pyrite-xwa-tag": LocalJSX.PyriteXwaTag & JSXBase.HTMLAttributes<HTMLPyriteXwaTagElement>;
            "pyrite-xwa-team": LocalJSX.PyriteXwaTeam & JSXBase.HTMLAttributes<HTMLPyriteXwaTeamElement>;
            "pyrite-xwa-trigger": LocalJSX.PyriteXwaTrigger & JSXBase.HTMLAttributes<HTMLPyriteXwaTriggerElement>;
            "pyrite-xwa-waypt": LocalJSX.PyriteXwaWaypt & JSXBase.HTMLAttributes<HTMLPyriteXwaWayptElement>;
            "pyrite-xwa-xwa-string": LocalJSX.PyriteXwaXwaString & JSXBase.HTMLAttributes<HTMLPyriteXwaXwaStringElement>;
        }
    }
}
